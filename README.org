* PhiSym
** Setup:   
   : cmsrel CMSSW_10_5_X
   : cd CMSSW_10_5_X/src/
   : cmsenv
   : git-cms-init
   : git clone https://github.com/flaviacetorelli/PhiSym -b EFlow
   : cd PhiSym
   : ./EcalCalibAlgos/scripts/setup_ext_tools.sh

** Run CRAB jobs:
   : cd production2017
   : cmsenv
   : voms-proxy-init -voms cms --valid 168:00
   : source /cvmfs/cms.cern.ch/crab3/crab.sh 
   Use the submit.sh script to submit GRID tasks for RECO (aka step-1) and MERGER (aka step-2)

** EcalCalibAlgos:
*** PhiSymProducer (aka "step1"):
    + Produce slim EDM files with information stored on a lumi-base
    + Produce a json file suitable for the splitting script =scripts/make-iovs.py=
    + Optionally at this step is possible to store spectra for each channel (DO NOT DO THIS ON THE GRID. SPECTRA FILES ARE HUGE)
    + The number of luminosity blocks summed at this step can be set from the cfg python (default 1).
    + Bad channels are processed in the same way of the good ones, except that a flag is set in the PhiSymInfos collection.

*** PhiSymMerger

** EcalCalibDataFomats:
   Contains PhiSym custum RecHits and Lumi-informations collections definition:

*** PhiSymRecHit:
    + raw-id -> detector id of the cristall.
    + nhits  -> number of events with recHit energy inside acceptance window.
    + sumEt  -> up to 10 mis-calibrated values + central value.
    + sumEt2 -> sum of the squared transverse energy.
    + sumLS  -> sum of the laser correction.
    + sumLS2 -> sum of the squared laser correction.


*** PhiSymInfos:
    + nEvents        -> number of events recorded during the lumi block(s).
    + x,y,z          -> beamspot 3D avarage position and RMS.
    + start/end lumi -> first and last lumi block (if lumis sum is enabled in the producer).
    + badChannels    -> map<bad channel id, channel status>, the "bad channel status threshold" is set by the producer.

